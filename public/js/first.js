// Generated by CoffeeScript 1.6.3
(function() {
  var image_stack, refresh_block, socket;

  image_stack = [];

  socket = io.connect();

  socket.on('connect', function() {
    return $('#status').html('connected');
  });

  refresh_block = function(msgdata) {
    var block;
    block = $('#msg' + msgdata.id);
    if (block.length === 0) {
      block = $('<div><a href="" target="_blank"><img src=""></a><span class="likes"></span><span class="tags"></span><span class="comments"></span></div>').attr('id', 'msg' + msgdata.id);
      $('#live').prepend(block);
    }
    block.find('a').attr('href', msgdata.link);
    block.find('img').attr('src', msgdata.images.low_resolution.url);
    block.find('span.likes').html(msgdata.likes.count);
    block.find('span.tags').html(msgdata.tags.join(', '));
    if (msgdata.comments.count > 0) {
      block.find('span.comments').html(msgdata.comments.data[msgdata.comments.count - 1].text);
    }
    block.show(300);
    if ($('#live > div').length > 100) {
      $('#live > div:last').remove();
    }
    return 0;
  };

  socket.on('message', function(msg) {
    var data, _i, _len, _ref, _results;
    console.log(msg);
    _ref = msg.message.data;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      data = _ref[_i];
      if (!void 0) {
        _results.push(refresh_block(data));
      }
    }
    return _results;
  });

}).call(this);
